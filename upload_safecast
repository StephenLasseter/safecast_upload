#!/usr/bin/env python

import os
import sys
import time
import glob
import shutil
import ConfigParser

def notify(message):
    title = 'upload_safecast'
    print message
    os.system('osascript -e \'display notification "' + message +
              '" with title "' + title + '"\'')

def main():
    safecastpath = os.getenv('HOME') + '/Safecast'

    # Pull in configuration from the ini file.  See the config file for further
    # documentation.
    config = ConfigParser.RawConfigParser()
    config.read(safecastpath + '/config/upload_safecast.ini')
    apikey   = config.get('common', 'APIKEY')
    location = config.get('common', 'LOCATION')
    credits  = config.get('common', 'CREDITS')
    volume   = config.get('common', 'VOLUME')
    userid   = config.get('common', 'USERID')

    # This is a simple way to disable this script.  Another way is it run
    #launchctl unload ~/Library/LaunchAgents/org.safecast.upload_safecast.plist
    if os.path.exists(os.getenv('HOME') + '/.upload_safecast_lock'):
        notify("Encountered lock file.  Exiting...")
        sys.exit(1)

    time.sleep(1)  ## Give it time to mount fully
    sdcardpath = '/Volumes/' + volume

    # The launchd configuration will run this script every time any disk is
    # mounted, so we first need to check if the mount event matches the disk
    # volume name that is set in the upload_safecast.ini configuration.  If
    # not, silently exit.
    if os.path.exists(sdcardpath):
        notify("Data card detected")
        os.system('say data card detected')
        if not os.path.exists(safecastpath):
            os.makedirs(safecastpath)
        if not os.path.exists(safecastpath + '/ARCHIVE'):
            os.makedirs(safecastpath + '/ARCHIVE')
        if not os.path.exists(sdcardpath + '/ARCHIVE'):
            os.makedirs(safecastpath + '/ARCHIVE')

        # Loop over each log file found on the CD card for processing
        for logpath in glob.glob(os.path.join(sdcardpath, '*.LOG')):
            if os.path.isfile(logpath):
                newlogname = (os.path.basename(logpath)[:-4] + '_' +
                            str(int(time.time())) + '.LOG')
                try:
                    # Copy the log file from the SD card to local disk
                    shutil.copy(logpath, safecastpath + '/' + newlogname)
                except:
                    notify("copy failed")
                    os.system('say copy failed')
                    sys.exit(1)
                else:
                    # Archive the log file on the SD card
                    shutil.move(logpath, sdcardpath + '/ARCHIVE/' + newlogname)

                    try:
                        # Export the log file to api.safecast.org
                        os.system(safecastpath + '/bin/export_safecast.py' +
                                ' -k ' + apikey +
                                ' -l ' + location +
                                ' -c "' + credits + '" ' +
                                safecastpath + '/' + newlogname)
                    except:
                        notify("Export to API failed.  See logs.")
                        os.system('say export to safecast a p i failed')
                        sys.exit(1)
                    else:
                        # Archive the log file on the local system
                        shutil.move(safecastpath + '/' + newlogname,
                                    safecastpath + '/ARCHIVE')
        # Eject the data card and notify the user it is safe to remove
        os.system('diskutil unmount ' + volume)
        notify("Data card unmounted")
        os.system('say data card unmounted')

        # Open the safecast import url for the user to review
        imports_url = ('https://api.safecast.org/en-US/bgeigie_imports?' +
                       'by_status=processed&by_user_id=' + userid +
                       '&order=created_at+asc')
        time.sleep(5)  ## Give safecast a moment to process
        os.system('osascript -e \'open location "' + imports_url + '"\'')


if __name__ == "__main__":
    main()
